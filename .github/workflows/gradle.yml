# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

#본인이 설정한 값을 여기서 채워넣기
#리전,버킷 이름, CodeDeploy앱 이름, CodeDeploy배포 그룹 이름
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET_NAME:  ${{ secrets.S3_BUCKET_NAME }}
  CODE_DEPLOY_APPLICATION_NAME:  ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }}
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME:  ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

    - name: Build permission add
      run: chmod +x gradlew
           
    - name: Build with Gradle Wrapper
      run: ./gradlew build


    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy JAR to EC2 server
      run: scp -i ${{ secrets.SSH_PRIVATE_KEY }} ./build/libs/your.jar  ${{ secrets.SERVER1_IP }}:/home/ubuntu/service/server/
  
    - name: Copy JAR to EC2 server
      run: scp -i ${{ secrets.SSH_PRIVATE_KEY }} ./build/libs/your.jar ${{ secrets.SERVER2_IP }}:/home/ubuntu/service/server/


    - name: SSH into EC2 server and start service
      run: |
        ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SERVER1_IP }} << EOF
          cd /home/ubuntu/service/server/
          nohup java -jar your.jar > output.log &
        EOF    

    - name: SSH into EC2 server and start service
      run: |
        ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SERVER2_IP }} << EOF
          cd /home/ubuntu/service/server/
          nohup java -jar your.jar > output.log &
        EOF    
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  # dependency-submission:

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write

    
